@page "/department/edit/{departmentId:int}"
@using HRApp.Shared.Entities
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js

<h3>Edit Department</h3>
<EditForm Model="@department" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 8 characters"
                                  @bind-Value="department.Name" For="@(() => department.Name)"/>
                    <MudTextField Label="Description" HelperText="Max. 8 characters"
                                  @bind-Value="department.Description" For="@(() => department.Description)"/>
                    
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="EditDepartment">Update</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    bool success;
    [Parameter] public int departmentId { get; set; }
    Department department = new Department();
    protected async override Task OnParametersSetAsync()
    {
        department = await http.GetFromJsonAsync<Department>($"api/department/{departmentId}");
    }
    async Task EditDepartment()
    {
        await http.PutAsJsonAsync("api/department", department);
        await js.InvokeVoidAsync("alert", $"Updated Successfully!");
        uriHelper.NavigateTo("department");
    }
    
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

}